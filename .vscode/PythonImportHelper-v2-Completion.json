[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "apps.task.models",
        "description": "apps.task.models",
        "isExtraImport": true,
        "detail": "apps.task.models",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "importPath": "apps.task.serializers",
        "description": "apps.task.serializers",
        "isExtraImport": true,
        "detail": "apps.task.serializers",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListTagApiView",
        "importPath": "apps.tag.views",
        "description": "apps.tag.views",
        "isExtraImport": true,
        "detail": "apps.tag.views",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "apps.tag.models",
        "description": "apps.tag.models",
        "isExtraImport": true,
        "detail": "apps.tag.models",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "apps.tag.models",
        "description": "apps.tag.models",
        "isExtraImport": true,
        "detail": "apps.tag.models",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "apps.tag.models",
        "description": "apps.tag.models",
        "isExtraImport": true,
        "detail": "apps.tag.models",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "apps.tag.serializers",
        "description": "apps.tag.serializers",
        "isExtraImport": true,
        "detail": "apps.tag.serializers",
        "documentation": {}
    },
    {
        "label": "CreateTaskApi",
        "importPath": "apps.task.views",
        "description": "apps.task.views",
        "isExtraImport": true,
        "detail": "apps.task.views",
        "documentation": {}
    },
    {
        "label": "ListTaskApi",
        "importPath": "apps.task.views",
        "description": "apps.task.views",
        "isExtraImport": true,
        "detail": "apps.task.views",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ProfileModel",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "ProfileModel",
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "isExtraImport": true,
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "apps.user.serializers",
        "description": "apps.user.serializers",
        "isExtraImport": true,
        "detail": "apps.user.serializers",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "importPath": "apps.user.managers",
        "description": "apps.user.managers",
        "isExtraImport": true,
        "detail": "apps.user.managers",
        "documentation": {}
    },
    {
        "label": "atomic",
        "importPath": "django.db.transaction",
        "description": "django.db.transaction",
        "isExtraImport": true,
        "detail": "django.db.transaction",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "importPath": "apps.auth.urls",
        "description": "apps.auth.urls",
        "isExtraImport": true,
        "detail": "apps.auth.urls",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions ",
        "description": "rest_framework.permissions ",
        "isExtraImport": true,
        "detail": "rest_framework.permissions ",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AuthConfig",
        "kind": 6,
        "importPath": "apps.auth.apps",
        "description": "apps.auth.apps",
        "peekOfCode": "class AuthConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.auth'\n    label = '_auth'",
        "detail": "apps.auth.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.auth.urls",
        "description": "apps.auth.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "apps.auth.urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.project.migrations.0001_initial",
        "description": "apps.project.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('task', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ProjectModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.project.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ProjectConfig",
        "kind": 6,
        "importPath": "apps.project.apps",
        "description": "apps.project.apps",
        "peekOfCode": "class ProjectConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.project'",
        "detail": "apps.project.apps",
        "documentation": {}
    },
    {
        "label": "ProjectModel",
        "kind": 6,
        "importPath": "apps.project.models",
        "description": "apps.project.models",
        "peekOfCode": "class ProjectModel(BaseModel):\n    class Meta:\n        db_table = 'projects'\n    name = models.CharField(max_length=25)\n    tasks = models.ForeignKey(TaskModel, on_delete=models.CASCADE, related_name='project')",
        "detail": "apps.project.models",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "kind": 6,
        "importPath": "apps.project.serializer",
        "description": "apps.project.serializer",
        "peekOfCode": "class ProjectSerializer(ModelSerializer):\n    task = TaskSerializer\n    class Meta:\n        model = ProjectModel\n        fields = ('name', 'tasks')\n    read_only_fields = ('tasks',)",
        "detail": "apps.project.serializer",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.project.urls",
        "description": "apps.project.urls",
        "peekOfCode": "urlpatterns = [\n    path('list/', ListProjectApiView.as_view(),),\n]",
        "detail": "apps.project.urls",
        "documentation": {}
    },
    {
        "label": "ListProjectApiView",
        "kind": 6,
        "importPath": "apps.project.views",
        "description": "apps.project.views",
        "peekOfCode": "class ListProjectApiView(ListAPIView):\n    serializer_class = ProjectSerializer\n    queryset = ProjectModel.objects.all()",
        "detail": "apps.project.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.tag.migrations.0001_initial",
        "description": "apps.tag.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TagModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=25, unique=True)),",
        "detail": "apps.tag.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TagConfig",
        "kind": 6,
        "importPath": "apps.tag.apps",
        "description": "apps.tag.apps",
        "peekOfCode": "class TagConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.tag'",
        "detail": "apps.tag.apps",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "kind": 6,
        "importPath": "apps.tag.models",
        "description": "apps.tag.models",
        "peekOfCode": "class TagModel(models.Model):\n    class Meta:\n        db_table = 'tags'\n    name=models.CharField(max_length=25, unique=True)",
        "detail": "apps.tag.models",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "apps.tag.serializers",
        "description": "apps.tag.serializers",
        "peekOfCode": "class TagSerializer(ModelSerializer):\n    class Meta:\n        model = TagModel\n        fields = ('name',)",
        "detail": "apps.tag.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.tag.urls",
        "description": "apps.tag.urls",
        "peekOfCode": "urlpatterns = [\n    path('list/', ListTagApiView.as_view())\n]",
        "detail": "apps.tag.urls",
        "documentation": {}
    },
    {
        "label": "ListTagApiView",
        "kind": 6,
        "importPath": "apps.tag.views",
        "description": "apps.tag.views",
        "peekOfCode": "class ListTagApiView(ListAPIView):\n    serializer_class = TagSerializer\n    queryset = TagModel",
        "detail": "apps.tag.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.task.migrations.0001_initial",
        "description": "apps.task.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tag', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TaskModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.task.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TaskTestCase",
        "kind": 6,
        "importPath": "apps.task.tests.test_view",
        "description": "apps.task.tests.test_view",
        "peekOfCode": "class TaskTestCase(APITestCase):\n    def _createtask(self):\n        sample_task = {\n            'name': 'test',\n            'description': 'test'\n        }\n        self.client.post(reverse('tasks_create'), sample_task)\n    def test_create_task(self):\n        count = TaskModel.objects.count()\n        tag = TagModel.objects.create(name='test')",
        "detail": "apps.task.tests.test_view",
        "documentation": {}
    },
    {
        "label": "TaskConfig",
        "kind": 6,
        "importPath": "apps.task.apps",
        "description": "apps.task.apps",
        "peekOfCode": "class TaskConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.task'",
        "detail": "apps.task.apps",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "kind": 6,
        "importPath": "apps.task.models",
        "description": "apps.task.models",
        "peekOfCode": "class TaskModel(models.Model):\n    class Meta:\n        db_table = 'tasks'\n    name = models.CharField(max_length=25)\n    description = models.TextField()\n    deadline = models.DateTimeField(blank=True, null=True)\n    tag = models.ManyToManyField(TagModel, related_name='tasks', blank=True)",
        "detail": "apps.task.models",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "apps.task.serializers",
        "description": "apps.task.serializers",
        "peekOfCode": "class TaskSerializer(ModelSerializer):\n    tag = TagSerializer(many=True, read_only=True)\n    class Meta:\n        model = TaskModel\n        fields = ('name', 'description', 'deadline', 'tag')\n    def create(self, validated_data:dict):\n        validated_data.setdefault('tag', None)\n        tag = validated_data.pop('tag')\n        if tag:\n            list_tag = []",
        "detail": "apps.task.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.task.urls",
        "description": "apps.task.urls",
        "peekOfCode": "urlpatterns = [\n    path('list/', ListTaskApi.as_view(), name = 'tasks_list' ),\n    path('create/', CreateTaskApi.as_view(), name = 'tasks_create')\n]",
        "detail": "apps.task.urls",
        "documentation": {}
    },
    {
        "label": "CreateTaskApi",
        "kind": 6,
        "importPath": "apps.task.views",
        "description": "apps.task.views",
        "peekOfCode": "class CreateTaskApi(CreateAPIView):\n    serializer_class = TaskSerializer\nclass ListTaskApi(ListAPIView):\n    serializer_class =TaskSerializer\n    queryset = TaskModel.objects.all()",
        "detail": "apps.task.views",
        "documentation": {}
    },
    {
        "label": "ListTaskApi",
        "kind": 6,
        "importPath": "apps.task.views",
        "description": "apps.task.views",
        "peekOfCode": "class ListTaskApi(ListAPIView):\n    serializer_class =TaskSerializer\n    queryset = TaskModel.objects.all()",
        "detail": "apps.task.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "apps.user.migrations.0001_initial",
        "description": "apps.user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ProfileModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "apps.user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserSerializerTest",
        "kind": 6,
        "importPath": "apps.user.tests.test_serializer",
        "description": "apps.user.tests.test_serializer",
        "peekOfCode": "class UserSerializerTest(TestCase):\n    def test_user_create(self):\n        data = {\n            \"email\": \"test@gmail.com\",\n            \"password\": \"password\",\n            \"profile\": {\n                \"nickname\": \"Test\",\n                \"bio\": \"test\"\n            }\n        }",
        "detail": "apps.user.tests.test_serializer",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "apps.user.tests.test_serializer",
        "description": "apps.user.tests.test_serializer",
        "peekOfCode": "UserModel = get_user_model()\nclass UserSerializerTest(TestCase):\n    def test_user_create(self):\n        data = {\n            \"email\": \"test@gmail.com\",\n            \"password\": \"password\",\n            \"profile\": {\n                \"nickname\": \"Test\",\n                \"bio\": \"test\"\n            }",
        "detail": "apps.user.tests.test_serializer",
        "documentation": {}
    },
    {
        "label": "UserViewsTest",
        "kind": 6,
        "importPath": "apps.user.tests.test_view",
        "description": "apps.user.tests.test_view",
        "peekOfCode": "class UserViewsTest(APITestCase):\n    def setUp(self):\n        self.admin_profile = ProfileModel.objects.create(\n            nickname=\"Tester\",\n            bio=\"Test bio\"\n        )\n        self.user_profile = ProfileModel.objects.create(\n            nickname=\"Tester\",\n            bio=\"Test bio\"\n        )",
        "detail": "apps.user.tests.test_view",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "apps.user.tests.test_view",
        "description": "apps.user.tests.test_view",
        "peekOfCode": "UserModel = get_user_model()\nclass UserViewsTest(APITestCase):\n    def setUp(self):\n        self.admin_profile = ProfileModel.objects.create(\n            nickname=\"Tester\",\n            bio=\"Test bio\"\n        )\n        self.user_profile = ProfileModel.objects.create(\n            nickname=\"Tester\",\n            bio=\"Test bio\"",
        "detail": "apps.user.tests.test_view",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "apps.user.apps",
        "description": "apps.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.user'",
        "detail": "apps.user.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "apps.user.managers",
        "description": "apps.user.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password, **kwargs):\n        email = self.normalize_email(email)\n        user = self.model(email=email, **kwargs)\n        user.set_password(password)\n        user.save()\n        return user\n    def create_superuser(self, email, password, *args, **kwargs):\n        kwargs.setdefault('is_superuser', True)\n        kwargs.setdefault('is_admin', True)",
        "detail": "apps.user.managers",
        "documentation": {}
    },
    {
        "label": "ProfileModel",
        "kind": 6,
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "peekOfCode": "class ProfileModel(BaseModel):\n    class Meta:\n        db_table = 'profiles'\n    nickname = models.CharField(max_length=20)\n    bio = models.TextField()\n    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True)\nclass UserModel(AbstractBaseUser, PermissionsMixin, BaseModel):\n    class Meta:\n        db_table = 'auth_users'\n    email = models.EmailField(unique=True)",
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "apps.user.models",
        "description": "apps.user.models",
        "peekOfCode": "class UserModel(AbstractBaseUser, PermissionsMixin, BaseModel):\n    class Meta:\n        db_table = 'auth_users'\n    email = models.EmailField(unique=True)\n    password = models.CharField(max_length=128)\n    profile = models.ForeignKey(ProfileModel, on_delete=models.CASCADE, related_name='user')\n    is_superuser = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n    USERNAME_FIELD = 'email'",
        "detail": "apps.user.models",
        "documentation": {}
    },
    {
        "label": "ProfileSerializer",
        "kind": 6,
        "importPath": "apps.user.serializers",
        "description": "apps.user.serializers",
        "peekOfCode": "class ProfileSerializer(ModelSerializer):\n    class Meta:\n        model = ProfileModel\n        fields = ('id', 'nickname', 'bio')\nclass UserSerializer(ModelSerializer):\n    profile = ProfileSerializer()\n    class Meta:\n        model = UserModel\n        fields = ('id', 'email', 'password', 'profile', 'is_superuser', 'is_active', 'is_admin', 'created_at', 'updated_at')\n        read_only_fields = ('is_superuser', 'is_active', 'id', 'is_admin')",
        "detail": "apps.user.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "apps.user.serializers",
        "description": "apps.user.serializers",
        "peekOfCode": "class UserSerializer(ModelSerializer):\n    profile = ProfileSerializer()\n    class Meta:\n        model = UserModel\n        fields = ('id', 'email', 'password', 'profile', 'is_superuser', 'is_active', 'is_admin', 'created_at', 'updated_at')\n        read_only_fields = ('is_superuser', 'is_active', 'id', 'is_admin')\n        extra_kwargs = {\n            \"password\": {\n                \"write_only\": True,\n            }",
        "detail": "apps.user.serializers",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "apps.user.serializers",
        "description": "apps.user.serializers",
        "peekOfCode": "UserModel = get_user_model()\nclass ProfileSerializer(ModelSerializer):\n    class Meta:\n        model = ProfileModel\n        fields = ('id', 'nickname', 'bio')\nclass UserSerializer(ModelSerializer):\n    profile = ProfileSerializer()\n    class Meta:\n        model = UserModel\n        fields = ('id', 'email', 'password', 'profile', 'is_superuser', 'is_active', 'is_admin', 'created_at', 'updated_at')",
        "detail": "apps.user.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.user.urls",
        "description": "apps.user.urls",
        "peekOfCode": "urlpatterns = [\n    path('me/', GetMe.as_view(), name='get_me'),\n    path('create/', CreateUserApiView.as_view(), name='create_user'),\n    path('list/', ListUserApiView.as_view(), name='list_users')\n]",
        "detail": "apps.user.urls",
        "documentation": {}
    },
    {
        "label": "GetMe",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class GetMe(RetrieveAPIView):\n    permission_classes=(IsAuthenticated,)\n    serializer_class = UserSerializer\n    def get_object(self):\n        return self.request.user\nclass ListUserApiView(ListAPIView):\n    permission_classes = [IsAdminUser]\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\nclass CreateUserApiView(CreateAPIView):",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "ListUserApiView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class ListUserApiView(ListAPIView):\n    permission_classes = [IsAdminUser]\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\nclass CreateUserApiView(CreateAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "CreateUserApiView",
        "kind": 6,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "class CreateUserApiView(CreateAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "apps.user.views",
        "description": "apps.user.views",
        "peekOfCode": "UserModel = get_user_model()\n# Create your views here.\nclass GetMe(RetrieveAPIView):\n    permission_classes=(IsAuthenticated,)\n    serializer_class = UserSerializer\n    def get_object(self):\n        return self.request.user\nclass ListUserApiView(ListAPIView):\n    permission_classes = [IsAdminUser]\n    queryset = UserModel.objects.all()",
        "detail": "apps.user.views",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "config.extra_conf.jwt_config",
        "description": "config.extra_conf.jwt_config",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=10),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"UPDATE_LAST_LOGIN\": True,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n}",
        "detail": "config.extra_conf.jwt_config",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-khsctmh9o2va-kzz59!&shqrsnlu8m+5n@6hzz!(8c7yn_d!pf'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nAUTH_USER_MODEL = 'user.UserModel'\nREST_FRAMEWORK = {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-khsctmh9o2va-kzz59!&shqrsnlu8m+5n@6hzz!(8c7yn_d!pf'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nAUTH_USER_MODEL = 'user.UserModel'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nAUTH_USER_MODEL = 'user.UserModel'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# Application definition\nINSTALLED_APPS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nAUTH_USER_MODEL = 'user.UserModel'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'user.UserModel'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'apps.auth',\n    'apps.project',\n    'apps.tag',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'config.urls'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('auth/', include('apps.auth.urls')),\n    path('tag/', include('apps.tag.urls')),\n    path('user/', include('apps.user.urls')),\n    path('task/', include('apps.task.urls')),\n    path('project/', include('apps.project.urls'))\n]",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class BaseModel(models.Model):\n    class Meta:\n        abstract = True\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class IsAdminUser(BasePermission):\n    def has_permission(self, request, view):\n        return bool(request.user and request.user.is_admin)",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]